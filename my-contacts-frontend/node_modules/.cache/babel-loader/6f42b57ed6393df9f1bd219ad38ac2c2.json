{"ast":null,"code":"// import React, { useContext, useEffect, useState } from \"react\";\n// import { AuthContext } from \"../contexts/AuthContext\";\n// import \"../styles/Dashboard.css\"; \n\n// const Dashboard = () => {\n//   const { token, setToken } = useContext(AuthContext);\n//   const [contacts, setContacts] = useState([]);\n//   const [form, setForm] = useState({ name: \"\", email: \"\", contact: \"\" });\n//   const [msg, setMsg] = useState(\"\");\n//   const [editingId, setEditingId] = useState(null);\n\n//   // Fetch contacts logic\n//   const getContacts = async () => {\n//     setMsg(\"\");\n//     try {\n//       const res = await fetch(\"/api/contacts\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       if (!res.ok) throw new Error(\"Failed to fetch contacts\");\n//       setContacts(await res.json());\n//       console.log(\"Contacts after fetch:\", contacts);\n//     } catch (err) {\n//       setMsg(err.message);\n//     }\n//   };\n\n//   useEffect(() => {\n//     getContacts();\n//     // eslint-disable-next-line\n//   }, [token]);\n\n//   const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });\n\n//   const handleSubmit = async e => {\n//     e.preventDefault();\n//     setMsg(\"\");\n//      console.log(form); // Debug: check form data\n//     try {\n//       const res = await fetch(\"/api/contacts\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify(form),\n//       });\n//       if (!res.ok) throw new Error(\"Failed to add contact\");\n//       setForm({ name: \"\", email: \"\", contact: \"\" });\n//       setMsg(\"Contact added!\");\n//       getContacts();\n//     } catch (err) {\n//       setMsg(err.message);\n//     }\n//   };\n\n//   const handleDelete = async id => {\n//     setMsg(\"\");\n//     try {\n//       const res = await fetch(`/api/contacts/${id}`, {\n//         method: \"DELETE\",\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       if (!res.ok) throw new Error(\"Failed to delete contact\");\n//       setMsg(\"Contact deleted!\");\n//       getContacts();\n//     } catch (err) {\n//       setMsg(err.message);\n//     }\n//   };\n\n//   const handleEdit = contact => {\n//     setEditingId(contact._id);\n//     setForm({ name: contact.name, email: contact.email, contact: contact.contact });\n//   };\n\n//   const handleUpdate = async e => {\n//     e.preventDefault();\n//     setMsg(\"\");\n//     try {\n//       const res = await fetch(`/api/contacts/${editingId}`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify(form),\n//       });\n//       if (!res.ok) throw new Error(\"Failed to update contact\");\n//       setEditingId(null);\n//       setForm({ name: \"\", email: \"\", contact: \"\" });\n//       setMsg(\"Contact updated!\");\n//       getContacts();\n//     } catch (err) {\n//       setMsg(err.message);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     setToken(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Dashboard</h2>\n//       <button onClick={handleLogout}>Logout</button>\n//       <h3>{editingId ? \"Edit Contact\" : \"Add Contact\"}</h3>\n//       <form onSubmit={editingId ? handleUpdate : handleSubmit}>\n//         <input name=\"name\" placeholder=\"Name\" value={form.name} onChange={handleChange} required />\n//         <input name=\"email\" placeholder=\"Email\" value={form.email} onChange={handleChange} required />\n//         <input name=\"contact\" placeholder=\"Contact\" value={form.contact} onChange={handleChange} required />\n//         <button type=\"submit\">{editingId ? \"Update\" : \"Add\"}</button>\n//         {editingId && <button type=\"button\" onClick={() => { setEditingId(null); setForm({ name: \"\", email: \"\", contact: \"\" }); }}>Cancel</button>}\n//       </form>\n//       {msg && <div>{msg}</div>}\n//       <h3>Contacts</h3>\n//       <ul>\n//         {contacts.map(c => (\n//           <li key={c._id}>\n//             {c.name} - {c.email} - {c.contact}\n//             <button onClick={() => handleEdit(c)}>Edit</button>\n//             <button onClick={() => handleDelete(c._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// import React, { useContext, useEffect, useState } from \"react\";\n// import { AuthContext } from \"../contexts/AuthContext\";\n\n// const Dashboard = () => {\n//   const { token, setToken } = useContext(AuthContext);\n//   const [contacts, setContacts] = useState([]);\n//   const [form, setForm] = useState({ name: \"\", email: \"\", contact: \"\" });\n//   const [msg, setMsg] = useState(\"\");\n//   const [editingId, setEditingId] = useState(null);\n\n//   // Fetch contacts\n//   const getContacts = async () => {\n//     setMsg(\"\");\n//     try {\n//       const res = await fetch(\"/api/contacts\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       if (!res.ok) throw new Error(\"Failed to fetch contacts\");\n//       setContacts(await res.json());\n//     } catch (err) {\n//       setMsg(err.message);\n//     }\n//   };\n\n//   useEffect(() => {\n//     getContacts();\n//     // eslint-disable-next-line\n//   }, [token]);\n\n//   const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });\n\n//   const handleSubmit = async e => {\n//     e.preventDefault();\n//     setMsg(\"\");\n//     try {\n//       const res = await fetch(\"/api/contacts\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify(form),\n//       });\n//       if (!res.ok) throw new Error(\"Failed to add contact\");\n//       setForm({ name: \"\", email: \"\", contact: \"\" });\n//       setMsg(\"Contact added!\");\n//       getContacts();\n//     } catch (err) {\n//       setMsg(err.message);\n//     }\n//   };\n\n//   const handleDelete = async id => {\n//     setMsg(\"\");\n//     try {\n//       const res = await fetch(`/api/contacts/${id}`, {\n//         method: \"DELETE\",\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       if (!res.ok) throw new Error(\"Failed to delete contact\");\n//       setMsg(\"Contact deleted!\");\n//       getContacts();\n//     } catch (err) {\n//       setMsg(err.message);\n//     }\n//   };\n\n//   const handleEdit = contact => {\n//     setEditingId(contact._id);\n//     setForm({ name: contact.name, email: contact.email, contact: contact.contact });\n//   };\n\n//   const handleUpdate = async e => {\n//     e.preventDefault();\n//     setMsg(\"\");\n//     try {\n//       const res = await fetch(`/api/contacts/${editingId}`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify(form),\n//       });\n//       if (!res.ok) throw new Error(\"Failed to update contact\");\n//       setEditingId(null);\n//       setForm({ name: \"\", email: \"\", contact: \"\" });\n//       setMsg(\"Contact updated!\");\n//       getContacts();\n//     } catch (err) {\n//       setMsg(err.message);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     setToken(null);\n//   };\n\n//   return (\n//     <div style={{ background: \"#1e1e2f\", color: \"#fff\", minHeight: \"100vh\", padding: \"20px\" }}>\n//       <h2 style={{ textAlign: \"center\", color: \"#00ff88\" }}>Dashboard</h2>\n//       <button\n//         onClick={handleLogout}\n//         style={{\n//           background: \"#ff4444\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           padding: \"10px 20px\",\n//           borderRadius: \"5px\",\n//           cursor: \"pointer\",\n//           marginBottom: \"20px\",\n//         }}\n//       >\n//         Logout\n//       </button>\n\n//       <h3 style={{ color: \"#00ff88\" }}>{editingId ? \"Edit Contact\" : \"Add Contact\"}</h3>\n//       <form\n//         onSubmit={editingId ? handleUpdate : handleSubmit}\n//         style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\", maxWidth: \"400px\" }}\n//       >\n//         <input\n//           name=\"name\"\n//           placeholder=\"Name\"\n//           value={form.name}\n//           onChange={handleChange}\n//           required\n//           style={{ padding: \"10px\", borderRadius: \"5px\", border: \"1px solid #555\", background: \"#2e2e3f\", color: \"#fff\" }}\n//         />\n//         <input\n//           name=\"email\"\n//           placeholder=\"Email\"\n//           value={form.email}\n//           onChange={handleChange}\n//           required\n//           style={{ padding: \"10px\", borderRadius: \"5px\", border: \"1px solid #555\", background: \"#2e2e3f\", color: \"#fff\" }}\n//         />\n//         <input\n//           name=\"contact\"\n//           placeholder=\"Contact\"\n//           value={form.contact}\n//           onChange={handleChange}\n//           required\n//           style={{ padding: \"10px\", borderRadius: \"5px\", border: \"1px solid #555\", background: \"#2e2e3f\", color: \"#fff\" }}\n//         />\n//         <button\n//           type=\"submit\"\n//           style={{\n//             background: \"#00ff88\",\n//             color: \"#000\",\n//             padding: \"10px\",\n//             border: \"none\",\n//             borderRadius: \"5px\",\n//             cursor: \"pointer\",\n//             fontWeight: \"bold\",\n//           }}\n//         >\n//           {editingId ? \"Update\" : \"Add\"}\n//         </button>\n//         {editingId && (\n//           <button\n//             type=\"button\"\n//             onClick={() => {\n//               setEditingId(null);\n//               setForm({ name: \"\", email: \"\", contact: \"\" });\n//             }}\n//             style={{\n//               background: \"#555\",\n//               color: \"#fff\",\n//               padding: \"10px\",\n//               border: \"none\",\n//               borderRadius: \"5px\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             Cancel\n//           </button>\n//         )}\n//       </form>\n\n//       {msg && <div style={{ marginTop: \"10px\", color: \"#ffcc00\" }}>{msg}</div>}\n\n//       <h3 style={{ marginTop: \"30px\", color: \"#00ff88\" }}>Contacts</h3>\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\n//         {contacts.map(c => (\n//           <li\n//             key={c._id}\n//             style={{\n//               background: \"#2e2e3f\",\n//               marginBottom: \"10px\",\n//               padding: \"10px\",\n//               borderRadius: \"8px\",\n//               display: \"flex\",\n//               justifyContent: \"space-between\",\n//               alignItems: \"center\",\n//             }}\n//           >\n//             <span>\n//               <strong>{c.name}</strong> - {c.email} - {c.contact}\n//             </span>\n//             <div>\n//               <button\n//                 onClick={() => handleEdit(c)}\n//                 style={{\n//                   background: \"#ffaa00\",\n//                   color: \"#000\",\n//                   border: \"none\",\n//                   padding: \"5px 10px\",\n//                   marginRight: \"5px\",\n//                   borderRadius: \"5px\",\n//                   cursor: \"pointer\",\n//                 }}\n//               >\n//                 Edit\n//               </button>\n//               <button\n//                 onClick={() => handleDelete(c._id)}\n//                 style={{\n//                   background: \"#ff4444\",\n//                   color: \"#fff\",\n//                   border: \"none\",\n//                   padding: \"5px 10px\",\n//                   borderRadius: \"5px\",\n//                   cursor: \"pointer\",\n//                 }}\n//               >\n//                 Delete\n//               </button>\n//             </div>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;","map":{"version":3,"names":[],"sources":["D:/MY CONTACTS/my-contacts-frontend/src/pages/Dashboard.jsx"],"sourcesContent":["// import React, { useContext, useEffect, useState } from \"react\";\r\n// import { AuthContext } from \"../contexts/AuthContext\";\r\n// import \"../styles/Dashboard.css\"; \r\n\r\n// const Dashboard = () => {\r\n//   const { token, setToken } = useContext(AuthContext);\r\n//   const [contacts, setContacts] = useState([]);\r\n//   const [form, setForm] = useState({ name: \"\", email: \"\", contact: \"\" });\r\n//   const [msg, setMsg] = useState(\"\");\r\n//   const [editingId, setEditingId] = useState(null);\r\n\r\n//   // Fetch contacts logic\r\n//   const getContacts = async () => {\r\n//     setMsg(\"\");\r\n//     try {\r\n//       const res = await fetch(\"/api/contacts\", {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n//       if (!res.ok) throw new Error(\"Failed to fetch contacts\");\r\n//       setContacts(await res.json());\r\n//       console.log(\"Contacts after fetch:\", contacts);\r\n//     } catch (err) {\r\n//       setMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContacts();\r\n//     // eslint-disable-next-line\r\n//   }, [token]);\r\n\r\n//   const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });\r\n\r\n//   const handleSubmit = async e => {\r\n//     e.preventDefault();\r\n//     setMsg(\"\");\r\n//      console.log(form); // Debug: check form data\r\n//     try {\r\n//       const res = await fetch(\"/api/contacts\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//           Authorization: `Bearer ${token}`,\r\n//         },\r\n//         body: JSON.stringify(form),\r\n//       });\r\n//       if (!res.ok) throw new Error(\"Failed to add contact\");\r\n//       setForm({ name: \"\", email: \"\", contact: \"\" });\r\n//       setMsg(\"Contact added!\");\r\n//       getContacts();\r\n//     } catch (err) {\r\n//       setMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async id => {\r\n//     setMsg(\"\");\r\n//     try {\r\n//       const res = await fetch(`/api/contacts/${id}`, {\r\n//         method: \"DELETE\",\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n//       if (!res.ok) throw new Error(\"Failed to delete contact\");\r\n//       setMsg(\"Contact deleted!\");\r\n//       getContacts();\r\n//     } catch (err) {\r\n//       setMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleEdit = contact => {\r\n//     setEditingId(contact._id);\r\n//     setForm({ name: contact.name, email: contact.email, contact: contact.contact });\r\n//   };\r\n\r\n//   const handleUpdate = async e => {\r\n//     e.preventDefault();\r\n//     setMsg(\"\");\r\n//     try {\r\n//       const res = await fetch(`/api/contacts/${editingId}`, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//           Authorization: `Bearer ${token}`,\r\n//         },\r\n//         body: JSON.stringify(form),\r\n//       });\r\n//       if (!res.ok) throw new Error(\"Failed to update contact\");\r\n//       setEditingId(null);\r\n//       setForm({ name: \"\", email: \"\", contact: \"\" });\r\n//       setMsg(\"Contact updated!\");\r\n//       getContacts();\r\n//     } catch (err) {\r\n//       setMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     setToken(null);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Dashboard</h2>\r\n//       <button onClick={handleLogout}>Logout</button>\r\n//       <h3>{editingId ? \"Edit Contact\" : \"Add Contact\"}</h3>\r\n//       <form onSubmit={editingId ? handleUpdate : handleSubmit}>\r\n//         <input name=\"name\" placeholder=\"Name\" value={form.name} onChange={handleChange} required />\r\n//         <input name=\"email\" placeholder=\"Email\" value={form.email} onChange={handleChange} required />\r\n//         <input name=\"contact\" placeholder=\"Contact\" value={form.contact} onChange={handleChange} required />\r\n//         <button type=\"submit\">{editingId ? \"Update\" : \"Add\"}</button>\r\n//         {editingId && <button type=\"button\" onClick={() => { setEditingId(null); setForm({ name: \"\", email: \"\", contact: \"\" }); }}>Cancel</button>}\r\n//       </form>\r\n//       {msg && <div>{msg}</div>}\r\n//       <h3>Contacts</h3>\r\n//       <ul>\r\n//         {contacts.map(c => (\r\n//           <li key={c._id}>\r\n//             {c.name} - {c.email} - {c.contact}\r\n//             <button onClick={() => handleEdit(c)}>Edit</button>\r\n//             <button onClick={() => handleDelete(c._id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n// import React, { useContext, useEffect, useState } from \"react\";\r\n// import { AuthContext } from \"../contexts/AuthContext\";\r\n\r\n// const Dashboard = () => {\r\n//   const { token, setToken } = useContext(AuthContext);\r\n//   const [contacts, setContacts] = useState([]);\r\n//   const [form, setForm] = useState({ name: \"\", email: \"\", contact: \"\" });\r\n//   const [msg, setMsg] = useState(\"\");\r\n//   const [editingId, setEditingId] = useState(null);\r\n\r\n//   // Fetch contacts\r\n//   const getContacts = async () => {\r\n//     setMsg(\"\");\r\n//     try {\r\n//       const res = await fetch(\"/api/contacts\", {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n//       if (!res.ok) throw new Error(\"Failed to fetch contacts\");\r\n//       setContacts(await res.json());\r\n//     } catch (err) {\r\n//       setMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContacts();\r\n//     // eslint-disable-next-line\r\n//   }, [token]);\r\n\r\n//   const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });\r\n\r\n//   const handleSubmit = async e => {\r\n//     e.preventDefault();\r\n//     setMsg(\"\");\r\n//     try {\r\n//       const res = await fetch(\"/api/contacts\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//           Authorization: `Bearer ${token}`,\r\n//         },\r\n//         body: JSON.stringify(form),\r\n//       });\r\n//       if (!res.ok) throw new Error(\"Failed to add contact\");\r\n//       setForm({ name: \"\", email: \"\", contact: \"\" });\r\n//       setMsg(\"Contact added!\");\r\n//       getContacts();\r\n//     } catch (err) {\r\n//       setMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async id => {\r\n//     setMsg(\"\");\r\n//     try {\r\n//       const res = await fetch(`/api/contacts/${id}`, {\r\n//         method: \"DELETE\",\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n//       if (!res.ok) throw new Error(\"Failed to delete contact\");\r\n//       setMsg(\"Contact deleted!\");\r\n//       getContacts();\r\n//     } catch (err) {\r\n//       setMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleEdit = contact => {\r\n//     setEditingId(contact._id);\r\n//     setForm({ name: contact.name, email: contact.email, contact: contact.contact });\r\n//   };\r\n\r\n//   const handleUpdate = async e => {\r\n//     e.preventDefault();\r\n//     setMsg(\"\");\r\n//     try {\r\n//       const res = await fetch(`/api/contacts/${editingId}`, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//           Authorization: `Bearer ${token}`,\r\n//         },\r\n//         body: JSON.stringify(form),\r\n//       });\r\n//       if (!res.ok) throw new Error(\"Failed to update contact\");\r\n//       setEditingId(null);\r\n//       setForm({ name: \"\", email: \"\", contact: \"\" });\r\n//       setMsg(\"Contact updated!\");\r\n//       getContacts();\r\n//     } catch (err) {\r\n//       setMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     setToken(null);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ background: \"#1e1e2f\", color: \"#fff\", minHeight: \"100vh\", padding: \"20px\" }}>\r\n//       <h2 style={{ textAlign: \"center\", color: \"#00ff88\" }}>Dashboard</h2>\r\n//       <button\r\n//         onClick={handleLogout}\r\n//         style={{\r\n//           background: \"#ff4444\",\r\n//           color: \"#fff\",\r\n//           border: \"none\",\r\n//           padding: \"10px 20px\",\r\n//           borderRadius: \"5px\",\r\n//           cursor: \"pointer\",\r\n//           marginBottom: \"20px\",\r\n//         }}\r\n//       >\r\n//         Logout\r\n//       </button>\r\n\r\n//       <h3 style={{ color: \"#00ff88\" }}>{editingId ? \"Edit Contact\" : \"Add Contact\"}</h3>\r\n//       <form\r\n//         onSubmit={editingId ? handleUpdate : handleSubmit}\r\n//         style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\", maxWidth: \"400px\" }}\r\n//       >\r\n//         <input\r\n//           name=\"name\"\r\n//           placeholder=\"Name\"\r\n//           value={form.name}\r\n//           onChange={handleChange}\r\n//           required\r\n//           style={{ padding: \"10px\", borderRadius: \"5px\", border: \"1px solid #555\", background: \"#2e2e3f\", color: \"#fff\" }}\r\n//         />\r\n//         <input\r\n//           name=\"email\"\r\n//           placeholder=\"Email\"\r\n//           value={form.email}\r\n//           onChange={handleChange}\r\n//           required\r\n//           style={{ padding: \"10px\", borderRadius: \"5px\", border: \"1px solid #555\", background: \"#2e2e3f\", color: \"#fff\" }}\r\n//         />\r\n//         <input\r\n//           name=\"contact\"\r\n//           placeholder=\"Contact\"\r\n//           value={form.contact}\r\n//           onChange={handleChange}\r\n//           required\r\n//           style={{ padding: \"10px\", borderRadius: \"5px\", border: \"1px solid #555\", background: \"#2e2e3f\", color: \"#fff\" }}\r\n//         />\r\n//         <button\r\n//           type=\"submit\"\r\n//           style={{\r\n//             background: \"#00ff88\",\r\n//             color: \"#000\",\r\n//             padding: \"10px\",\r\n//             border: \"none\",\r\n//             borderRadius: \"5px\",\r\n//             cursor: \"pointer\",\r\n//             fontWeight: \"bold\",\r\n//           }}\r\n//         >\r\n//           {editingId ? \"Update\" : \"Add\"}\r\n//         </button>\r\n//         {editingId && (\r\n//           <button\r\n//             type=\"button\"\r\n//             onClick={() => {\r\n//               setEditingId(null);\r\n//               setForm({ name: \"\", email: \"\", contact: \"\" });\r\n//             }}\r\n//             style={{\r\n//               background: \"#555\",\r\n//               color: \"#fff\",\r\n//               padding: \"10px\",\r\n//               border: \"none\",\r\n//               borderRadius: \"5px\",\r\n//               cursor: \"pointer\",\r\n//             }}\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//         )}\r\n//       </form>\r\n\r\n//       {msg && <div style={{ marginTop: \"10px\", color: \"#ffcc00\" }}>{msg}</div>}\r\n\r\n//       <h3 style={{ marginTop: \"30px\", color: \"#00ff88\" }}>Contacts</h3>\r\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n//         {contacts.map(c => (\r\n//           <li\r\n//             key={c._id}\r\n//             style={{\r\n//               background: \"#2e2e3f\",\r\n//               marginBottom: \"10px\",\r\n//               padding: \"10px\",\r\n//               borderRadius: \"8px\",\r\n//               display: \"flex\",\r\n//               justifyContent: \"space-between\",\r\n//               alignItems: \"center\",\r\n//             }}\r\n//           >\r\n//             <span>\r\n//               <strong>{c.name}</strong> - {c.email} - {c.contact}\r\n//             </span>\r\n//             <div>\r\n//               <button\r\n//                 onClick={() => handleEdit(c)}\r\n//                 style={{\r\n//                   background: \"#ffaa00\",\r\n//                   color: \"#000\",\r\n//                   border: \"none\",\r\n//                   padding: \"5px 10px\",\r\n//                   marginRight: \"5px\",\r\n//                   borderRadius: \"5px\",\r\n//                   cursor: \"pointer\",\r\n//                 }}\r\n//               >\r\n//                 Edit\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => handleDelete(c._id)}\r\n//                 style={{\r\n//                   background: \"#ff4444\",\r\n//                   color: \"#fff\",\r\n//                   border: \"none\",\r\n//                   padding: \"5px 10px\",\r\n//                   borderRadius: \"5px\",\r\n//                   cursor: \"pointer\",\r\n//                 }}\r\n//               >\r\n//                 Delete\r\n//               </button>\r\n//             </div>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}